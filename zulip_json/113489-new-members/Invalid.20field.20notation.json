[
    {
        "content": "<p>Here Lean complains <code>invalid field notation, function 'measure_theory.measure_space.μ' does not have explicit argument with type (measure_theory.measure_space ...)</code></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure_space</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measure_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">dynamic</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">measure_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">dynamic</span><span class=\"bp\">.</span><span class=\"n\">invariant</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">dynamic</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"n\">image</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n\n<span class=\"n\">def</span> <span class=\"n\">ergodic</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">dynamic</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n   <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b_measurable</span> <span class=\"o\">:</span> <span class=\"n\">is_measurable</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b_invariant</span> <span class=\"o\">:</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">invariant</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n   <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">μ</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">μ</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n\n\n<p>I think I don't understand how extending a class works. How would I use the measure of the <code>dynamic</code> inherited from the <code>measure_space</code>?</p>",
        "id": 200000296,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1591490402
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 200000956,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1591491839
    },
    {
        "content": "<p>I think so. The <code>measure_space</code> class that you extended includes a choice of measure  on the measurable space <code>α</code>, and <code>volume</code> refers to this choice of measure (at least in the version of mathlib that I am looking at at the moment).</p>",
        "id": 200001412,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1591492796
    },
    {
        "content": "<p>I think if you want to work explicitly with the <code>μ</code> component of the measure space class, you can also do:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measure_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)[</span><span class=\"n\">is_measurable</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">measure_space</span><span class=\"bp\">.</span><span class=\"n\">μ</span> <span class=\"n\">α</span> <span class=\"bp\">_</span> <span class=\"n\">b</span>  <span class=\"c1\">-- the underscore corresponds to the choice of [measure_space α] instance, which Lean infers from context</span>\n<span class=\"bp\">``</span>\n</code></pre></div>",
        "id": 200001510,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1591493030
    },
    {
        "content": "<p>Or just <code>measure_space.μ b</code>. Since <code>b</code> is a subset of  <code>α</code>, Lean will look for the measure space instance on α that you declared and use that</p>",
        "id": 200001562,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1591493115
    }
]