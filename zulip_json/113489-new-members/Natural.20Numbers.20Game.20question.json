[
    {
        "content": "<p>Hi all, newbie here. I'm trying my luck with the Natural Numbers Game and I'm having a lot of fun with it, thanks for that already!</p>\n<p>Now, I just solved Level 8 of Advanced Proposition world,  <code>and_or_distrib_left</code>, but it took me 25 lines to write the proof. That feels... long? Anybody willing to look at it and give me some feedback if I'm doing this right?</p>",
        "id": 198058698,
        "sender_full_name": "Andreas Steiger",
        "timestamp": 1589892033
    },
    {
        "content": "<p>Sure, copy paste the proof here, using triple <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 198059294,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589892304
    },
    {
        "content": "<p>Thanks!</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">p</span> <span class=\"n\">qr</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">qr</span> <span class=\"k\">with</span> <span class=\"n\">q</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n<span class=\"n\">left</span><span class=\"o\">,</span>\n<span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n<span class=\"n\">right</span><span class=\"o\">,</span>\n<span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">f</span> <span class=\"k\">with</span> <span class=\"n\">pq</span> <span class=\"n\">pr</span><span class=\"o\">,</span>\n<span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">pq</span> <span class=\"k\">with</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">pq</span> <span class=\"k\">with</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n<span class=\"n\">left</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n<span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">pr</span> <span class=\"k\">with</span> <span class=\"n\">p</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">right</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">pr</span> <span class=\"k\">with</span> <span class=\"n\">p</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 198059365,
        "sender_full_name": "Andreas Steiger",
        "timestamp": 1589892346
    },
    {
        "content": "<p>So this works, but I felt like not really understanding how to use any structure except breaking it down into the very basic parts</p>",
        "id": 198059822,
        "sender_full_name": "Andreas Steiger",
        "timestamp": 1589892521
    },
    {
        "content": "<p>Can you please paste a link to the level?</p>",
        "id": 198059865,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589892544
    },
    {
        "content": "<p><a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=7&amp;level=8\">http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=7&amp;level=8</a></p>",
        "id": 198059926,
        "sender_full_name": "Andreas Steiger",
        "timestamp": 1589892581
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"303635\">@Andreas Steiger</span> I'm not sure what kind of solution you are looking for. Do you want a \"hammer\" that does the basic logic for you?</p>",
        "id": 198060738,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589892920
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> No, not really. I'm mostly wondering if a more experienced user would solve this very differently or if this is just the way you have to do this</p>",
        "id": 198061009,
        "sender_full_name": "Andreas Steiger",
        "timestamp": 1589893051
    },
    {
        "content": "<p>You can solve it in term mode. I posted a video of the difference on the Xena project YouTube channel</p>",
        "id": 198061121,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589893100
    },
    {
        "content": "<p>But you can't do term mode in the Natural Number Game, right?</p>",
        "id": 198061178,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589893141
    },
    {
        "content": "<p>Basically lean will let you solve this in one line, but you have to know a different way of interacting with it, outside the tactic monad</p>",
        "id": 198061185,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589893143
    },
    {
        "content": "<p>No, but you can do it in the online web editor</p>",
        "id": 198061228,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589893166
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"303635\">@Andreas Steiger</span> An experienced user would solve this totally differently, using tools that you don't have in NNG</p>",
        "id": 198061243,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589893171
    },
    {
        "content": "<p>I would post links but I'm on mobile and in a rush</p>",
        "id": 198061260,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589893178
    },
    {
        "content": "<p>Here is an NNG proof:</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">h</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span>\n    <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n    <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">split</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span><span class=\"o\">},</span>\n</code></pre></div>",
        "id": 198061280,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589893191
    },
    {
        "content": "<p>It gives a hint towards what you could do with more powerful tools</p>",
        "id": 198061345,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589893211
    },
    {
        "content": "<p>NNG does introduce <code>cc</code>, so I guess that could be used here?</p>",
        "id": 198061396,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1589893233
    },
    {
        "content": "<p>If all code looked like that then Johan and Patrick and I wouldn't have been able to make all the complex algebraic objects we made</p>",
        "id": 198061401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589893234
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cc</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">hpqr</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hpqr</span> <span class=\"k\">with</span> <span class=\"n\">hpq</span> <span class=\"n\">hpr</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">cc</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">cc</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 198061426,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1589893245
    },
    {
        "content": "<p>Aah, I didn't know that <code>cc</code> was available</p>",
        "id": 198061447,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589893257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20Numbers.20Game.20question/near/198061121\">said</a>:</p>\n<blockquote>\n<p>You can solve it in term mode. I posted a video of the difference on the Xena project YouTube channel</p>\n</blockquote>\n<p>Thanks, I think I've found them, I'll check it out!</p>",
        "id": 198061461,
        "sender_full_name": "Andreas Steiger",
        "timestamp": 1589893262
    },
    {
        "content": "<p>What is available is a closely guarded secret :-)</p>",
        "id": 198061530,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589893278
    },
    {
        "content": "<p>You can try this yourself in the web editor</p>",
        "id": 198061564,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589893296
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> request: <code>#nng-7-8</code> = <a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=7&amp;level=8\">http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=7&amp;level=8</a></p>",
        "id": 198064302,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589894549
    },
    {
        "content": "<p><code>cases classical.prop_decidable P; cc</code>.  I'm surprised that there is no <code>open_locale classical</code>.</p>",
        "id": 198065074,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589894921
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"303635\">@Andreas Steiger</span> you can try making a term mode proof following the techniques of <a href=\"https://www.youtube.com/watch?v=POHVMMG7pqE\">this video</a> using the <a href=\"https://www.youtube.com/watch?v=POHVMMG7pqE\">Lean web editor</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"POHVMMG7pqE\" href=\"https://www.youtube.com/watch?v=POHVMMG7pqE\"><img src=\"https://i.ytimg.com/vi/POHVMMG7pqE/default.jpg\"></a></div>",
        "id": 198065081,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589894927
    },
    {
        "content": "<p>Ha, Freek complained about the same thing: but how do I add open_locale classical to the entire game?</p>",
        "id": 198065153,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589894963
    },
    {
        "content": "<p>you can make classical.prop_decidable an instance in a file imported by all others.</p>",
        "id": 198067252,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589895875
    },
    {
        "content": "<p>With priority 10 or so? I don't even know how to see what <code>open_locale classical</code> does. Freek complained that equality wasn't decidable on <code>mynat</code> but this I could fix myself.</p>",
        "id": 198069828,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589896925
    }
]