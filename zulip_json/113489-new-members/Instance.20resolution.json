[
    {
        "content": "<p><code>[class_instances] trying next solution, current solution has metavars</code><br>\nInstance resolution is failing in my example (mwe coming in a moment) and on printing the class instance trace, the first try is the one I want, but it gives the above message and moves on - any idea how to fix?</p>",
        "id": 200737993,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592005898
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">comma</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- A sieve on X is a set of morphisms to X that is closed under left composition. -/</span>\n<span class=\"kn\">structure</span> <span class=\"n\">sieve</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">arrows</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">over</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">subs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">over</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"err\">∈</span> <span class=\"n\">arrows</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"err\">⟶</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">),</span> <span class=\"n\">over</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">≫</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">hom</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">arrows</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sieve</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">over</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">arrows</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">has_mem</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">class_instances</span> <span class=\"n\">true</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">sieve</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"err\">∈</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200738105,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592006034
    },
    {
        "content": "<p>BTW, <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span>, if you plan to eventually PR sheaves to mathlib, it might be worth starting with a discussion of the planned design</p>",
        "id": 200772155,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592062755
    },
    {
        "content": "<p>For subjects like this, a PR is not really the right place to start the discussion, I think.</p>",
        "id": 200772226,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592062829
    },
    {
        "content": "<p>I started a brief discussion in #maths earlier - at the moment though I'm doing it with enough generality to do forcing, and I'm happy to be guided by the geometry-minded people for the specialised API about sheaves on a site/space</p>",
        "id": 200772573,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592063393
    },
    {
        "content": "<p>Right now I'm making sure the specialisation to a site works like I think it should, and that sheafification of a presheaf on a space has the properties I want - then I'll do the stuff mentioned there about moving between spaces/toposes</p>",
        "id": 200772702,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592063532
    },
    {
        "content": "<p>For me \"forcing\" is a foreign word--when I try to understand it seems not to mean anything. I hope this doesn't end up totally disconnected from what is needed for geometry.</p>",
        "id": 200773109,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592064222
    },
    {
        "content": "<p>I also don't even know what an elementary topos is, or a Lawvere-Tierney topology.</p>",
        "id": 200773172,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592064301
    },
    {
        "content": "<p>This is why I think writing Lean code is not necessarily the correct starting point.</p>",
        "id": 200773185,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592064337
    },
    {
        "content": "<p>The <span aria-label=\"elephant\" class=\"emoji emoji-1f418\" role=\"img\" title=\"elephant\">:elephant:</span> nature is really difficult to work with here, I think.</p>",
        "id": 200773241,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592064405
    },
    {
        "content": "<p>These are reasonable concerns, do you have a suggestion of how we could go about starting this? My perspective is that I'm just providing some of the categorical machinery so that the people who need it for geometry don't have to</p>",
        "id": 200773511,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592064859
    },
    {
        "content": "<p>Maybe an informal roadmap, or just a pile of Lean <code>def</code>s with lots of stuff omitted?</p>",
        "id": 200775504,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592067811
    },
    {
        "content": "<p>(also <a class=\"stream\" data-stream-id=\"116395\" href=\"/#narrow/stream/116395-maths\">#maths</a> would be a better place for this)</p>",
        "id": 200775650,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592068014
    },
    {
        "content": "<p>Will do! Though I'd still appreciate any help on the original question :)</p>",
        "id": 200777784,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592071356
    },
    {
        "content": "<p>I think your instance is no good because it violates the <code>out_param</code>--<code>X</code> doesn't determine <code>Y</code></p>",
        "id": 200785377,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592081857
    },
    {
        "content": "<p>although I seem to recall something like this working in practice...</p>",
        "id": 200785382,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592081872
    },
    {
        "content": "<p>ah no, I didn't use <code>∈</code></p>",
        "id": 200785432,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592081922
    },
    {
        "content": "<p>probably because of this same issue</p>",
        "id": 200785433,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592081928
    },
    {
        "content": "<p>Surely there should be an error message at the definition site then?</p>",
        "id": 200785856,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592082637
    },
    {
        "content": "<p>My mental model of <code>out_param</code> was like Haskell's fundeps, and in this case I don't have any other instance which clashes/overlaps with that one</p>",
        "id": 200785871,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592082684
    },
    {
        "content": "<p>It's also wrong in Haskell... it doesn't surprise me that Lean doesn't give an error though</p>",
        "id": 200786261,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592083334
    },
    {
        "content": "<p>Anyways, <code>∈</code> is kind of useless because it's generalized in the wrong ways</p>",
        "id": 200786266,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592083367
    },
    {
        "content": "<p>Oh right, I was misreading which one the outparam was on - that makes sense</p>",
        "id": 200786465,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592083739
    },
    {
        "content": "<p>I guess you could just write <code>S.1 f</code></p>",
        "id": 200786545,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592083826
    },
    {
        "content": "<p>Yeah I was just wondering if I could make the notation prettier</p>",
        "id": 200786557,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592083885
    }
]